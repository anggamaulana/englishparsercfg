/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package englishparser;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.misc.TestRig;

/**
 *
 * @author angga
 */
public class Form extends javax.swing.JFrame {

    Connection c;
    Statement stmt;
    ResultSet rs;
    Map words;
    EnglishRulesParser parser;
    String expression;
     static List<String> exceptionsword = new ArrayList();

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        words = new HashMap();
        String[] exc = new String[]{"his","her","their","my","your","its","he","she","it","i","you","am","is","was","were","will","shall","may","and","or","but","then","unless","when","while"};
        for(int i=0;i<exc.length;i++)
        exceptionsword.add(exc[i]);
       
        try {
            Class.forName("org.sqlite.JDBC");

            c = DriverManager.getConnection("jdbc:sqlite:corpus.db");

            c.setAutoCommit(false);
        } catch (SQLException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
        }

        System.out.println("Opened database successfully");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_proses = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_kata = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input Kata : ");

        btn_proses.setText("Proses");
        btn_proses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_prosesActionPerformed(evt);
            }
        });

        txt_kata.setColumns(20);
        txt_kata.setRows(5);
        jScrollPane1.setViewportView(txt_kata);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_proses)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_proses)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_prosesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_prosesActionPerformed
        // TODO add your handling code here:
        
        //System.out.println(getSql());
        try {

            
            stmt = c.createStatement();
            
            
            rs = stmt.executeQuery(getSql());
            while (rs.next()) {
                String wordss=rs.getString("word");
                if(!exceptionsword.contains(wordss)){
                    words.put(wordss, rs.getString("tipe").substring(0, 1));
                }else{
                    words.put(wordss,wordss);
                }
                
            }
            rs.close();
            stmt.close();
            
            makeExpresion();
            parsing();
            //System.out.println(makeExpresion());
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
    }//GEN-LAST:event_btn_prosesActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_proses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_kata;
    // End of variables declaration//GEN-END:variables

    private String getSql() {
        String[] kata = txt_kata.getText().split(" ");
        String sql = "select * from word where word in (";
        for(int i=0;i<kata.length;i++){
            sql+="'"+kata[i]+"'";
            if(i<kata.length-1)
                sql+=",";
        }
        

        sql += ") order by \n";
        sql += "case word\n";

        for(int j=0;j<kata.length;j++){
            sql+="when '"+kata[j]+"' then "+j+"\n";
        }
        
                

        sql += "end\n"
                + ";";
        return sql;

    }
    
    private void parsing(){
        try {

            
            TestRig tr = new TestRig(new String[]{"englishparser.EnglishRules","s","-gui","tipe.txt"});
            tr.process();
        } catch (Exception ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
       
       
       
    }

    private void makeExpresion() {
        String[] kata = txt_kata.getText().split(" ");
        
        String result="";
        for(int i=0;i<kata.length;i++){
            if(words.containsKey(kata[i])){
                result+=words.get(kata[i])+" ";
            }else{
                result+="N ";
            }
        }
        
        try {
            try (BufferedWriter wr = new BufferedWriter(new PrintWriter(new File("tipe.txt")))) {
                wr.write(result);
                wr.close();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }
}
